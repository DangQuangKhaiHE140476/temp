// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using QLHSC07.Data.Repository;
using QLHSC07.Entity;

namespace QLHSC07.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220216111834_add_ProjectHasCommune_table")]
    partial class add_ProjectHasCommune_table
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "3.1.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("QLHSC07.Entity.Administrative.Commune", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int>("AdministrativeUnitCode")
                        .HasColumnName("administrative_unit_code")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DistrictId")
                        .HasColumnName("district_id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDelete")
                        .HasColumnName("is_delete")
                        .HasColumnType("boolean");

                    b.Property<double>("Latitude")
                        .HasColumnName("latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnName("longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("UnSignName")
                        .HasColumnName("unsign_name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("commune","cms");
                });

            modelBuilder.Entity("QLHSC07.Entity.Administrative.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int>("AdministrativeUnitCode")
                        .HasColumnName("administrative_unit_code")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDelete")
                        .HasColumnName("is_delete")
                        .HasColumnType("boolean");

                    b.Property<double>("Latitude")
                        .HasColumnName("latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnName("longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int>("ProvinceId")
                        .HasColumnName("province_id")
                        .HasColumnType("integer");

                    b.Property<string>("UnSignName")
                        .HasColumnName("unsign_name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("district","cms");
                });

            modelBuilder.Entity("QLHSC07.Entity.Administrative.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int>("AdministrativeUnitCode")
                        .HasColumnName("administrative_unit_code")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("DefaultProvince")
                        .HasColumnName("default_province")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDelete")
                        .HasColumnName("is_delete")
                        .HasColumnType("boolean");

                    b.Property<double>("Latitude")
                        .HasColumnName("latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnName("longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number")
                        .HasColumnType("integer");

                    b.Property<string>("UnSignName")
                        .HasColumnName("unsign_name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("province","cms");
                });

            modelBuilder.Entity("QLHSC07.Entity.ConsultCommunity.AnswerExtension", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Additional")
                        .HasColumnName("additional")
                        .HasColumnType("text");

                    b.Property<int?>("AnswerId")
                        .HasColumnName("answer_id")
                        .HasColumnType("integer");

                    b.Property<int>("PersonInfoId")
                        .HasColumnName("person_info_id")
                        .HasColumnType("integer");

                    b.Property<int>("QuestionId")
                        .HasColumnName("question_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("PersonInfoId");

                    b.HasIndex("QuestionId");

                    b.ToTable("answer_extension","cms");
                });

            modelBuilder.Entity("QLHSC07.Entity.ConsultCommunity.FormTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int?>("ConsultantCommunityId")
                        .HasColumnName("consultant_community_id")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDelete")
                        .HasColumnName("is_delete")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("form_template","cms");
                });

            modelBuilder.Entity("QLHSC07.Entity.ConsultCommunity.FormTemplateAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.Property<int>("QuestionId")
                        .HasColumnName("question_id")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("form_template_answer","cms");
                });

            modelBuilder.Entity("QLHSC07.Entity.ConsultCommunity.FormTemplateQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("AnswerType")
                        .HasColumnName("answer_type")
                        .HasColumnType("text");

                    b.Property<int>("FormTemplateId")
                        .HasColumnName("form_template_id")
                        .HasColumnType("integer");

                    b.Property<bool>("HaveAdditional")
                        .HasColumnName("have_additional")
                        .HasColumnType("boolean");

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FormTemplateId");

                    b.ToTable("form_template_question","cms");
                });

            modelBuilder.Entity("QLHSC07.Entity.ConsultCommunity.PersonInfoAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Address")
                        .HasColumnName("address")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("text");

                    b.Property<bool>("IsDelete")
                        .HasColumnName("is_delete")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNo")
                        .HasColumnName("phone_no")
                        .HasColumnType("text");

                    b.Property<string>("Reply")
                        .HasColumnName("reply")
                        .HasColumnType("text");

                    b.Property<string>("Suggestion")
                        .HasColumnName("suggestion")
                        .HasColumnType("text");

                    b.Property<int>("TemplateId")
                        .HasColumnName("form_template_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId");

                    b.ToTable("person_info_answer","cms");
                });

            modelBuilder.Entity("QLHSC07.Entity.Document.FileExtension", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Icon")
                        .HasColumnName("icon")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("file_extension","cms");
                });

            modelBuilder.Entity("QLHSC07.Entity.DocumentUpload", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("AllowedModify")
                        .HasColumnName("allowed_modify")
                        .HasColumnType("boolean");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("FileExtensionId")
                        .HasColumnName("file_extension_id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDelete")
                        .HasColumnName("is_delete")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsResizeImage")
                        .HasColumnName("is_resize_image")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<List<MultiSizeImagePaths>>("MultiSizeImagePaths")
                        .HasColumnName("multi_size_image_paths")
                        .HasColumnType("jsonb");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<long>("ParentId")
                        .HasColumnName("parent_id")
                        .HasColumnType("bigint");

                    b.Property<string>("Path")
                        .HasColumnName("path")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnName("type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FileExtensionId");

                    b.ToTable("document_upload","cms");
                });

            modelBuilder.Entity("QLHSC07.Entity.EmailGenerated", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("CC")
                        .HasColumnName("cc")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<string>("EmailType")
                        .HasColumnName("email_type")
                        .HasColumnType("text");

                    b.Property<string>("ErrorMessage")
                        .HasColumnName("error_message")
                        .HasColumnType("text");

                    b.Property<bool>("IsReplied")
                        .HasColumnName("is_replied")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .HasColumnName("message")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("phone_number")
                        .HasColumnType("text");

                    b.Property<int>("ReferenceNumber")
                        .HasColumnName("reference_number")
                        .HasColumnType("integer");

                    b.Property<int>("ReferenceTypeId")
                        .HasColumnName("reference_type")
                        .HasColumnType("integer");

                    b.Property<string>("SendFrom")
                        .HasColumnName("send_from")
                        .HasColumnType("text");

                    b.Property<string>("SendTo")
                        .HasColumnName("send_to")
                        .HasColumnType("text");

                    b.Property<DateTime>("SentDate")
                        .HasColumnName("sent_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .HasColumnName("subject")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnName("user_name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ReferenceTypeId");

                    b.ToTable("email_generated","sys");
                });

            modelBuilder.Entity("QLHSC07.Entity.EmailTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("CC")
                        .HasColumnName("cc")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SendTo")
                        .HasColumnName("send_to")
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnName("status")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("email_template","sys");
                });

            modelBuilder.Entity("QLHSC07.Entity.IdentityAccess.Role", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles","authentication");

                    b.HasData(
                        new
                        {
                            Id = "20f52440-0318-401f-9ca6-4bc5980e393e",
                            Code = "ADMIN",
                            ConcurrencyStamp = "14a08585-8597-424b-a1ca-c250bc27661e",
                            Name = "ADMIN"
                        });
                });

            modelBuilder.Entity("QLHSC07.Entity.IdentityAccess.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims","authentication");
                });

            modelBuilder.Entity("QLHSC07.Entity.IdentityAccess.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<long?>("DocumentUploadId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<long>("PC07LocalId")
                        .HasColumnName("pc07_local_id")
                        .HasColumnType("bigint");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<long?>("RankId")
                        .HasColumnName("rank_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("RegencyId")
                        .HasColumnName("regency_id")
                        .HasColumnType("bigint");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool?>("Sex")
                        .HasColumnType("boolean");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("UserType")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.HasKey("Id");

                    b.HasIndex("DocumentUploadId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.HasIndex("PC07LocalId");

                    b.HasIndex("RankId");

                    b.HasIndex("RegencyId");

                    b.ToTable("AspNetUsers","authentication");

                    b.HasData(
                        new
                        {
                            Id = "a7cd6c60-cea7-4aae-a750-514e1d74d1e8",
                            AccessFailedCount = 0,
                            Address = "Hà Nội",
                            ConcurrencyStamp = "5ea79422-891f-403f-b697-e495854163ea",
                            CreatedBy = "Administrator",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(2021, 2, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Administrator",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Administrator",
                            LockoutEnabled = false,
                            ModifiedBy = "Administrator",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PC07LocalId = 0L,
                            PasswordHash = "AQAAAAEAACcQAAAAEIwpHgrYjpij2oKnyfSjRuvmxiEK9ItWF2UjGWCHuJ9iyqMNd3ymn4XrRs5dqRRSMQ==",
                            PhoneNumber = "0968883898",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "ce58ce2d-d3bf-45ab-86f2-15ac96b88104",
                            Sex = true,
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com"
                        });
                });

            modelBuilder.Entity("QLHSC07.Entity.IdentityAccess.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims","authentication");
                });

            modelBuilder.Entity("QLHSC07.Entity.IdentityAccess.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId1")
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("AspNetUserLogins","authentication");
                });

            modelBuilder.Entity("QLHSC07.Entity.IdentityAccess.UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles","authentication");

                    b.HasData(
                        new
                        {
                            UserId = "a7cd6c60-cea7-4aae-a750-514e1d74d1e8",
                            RoleId = "20f52440-0318-401f-9ca6-4bc5980e393e"
                        });
                });

            modelBuilder.Entity("QLHSC07.Entity.IdentityAccess.UserTokens", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ExpiredTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens","authentication");
                });

            modelBuilder.Entity("QLHSC07.Entity.IdentityExtentions.AspNetRefreshTokens", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDelete")
                        .HasColumnName("is_delete")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RemoteIpAddress")
                        .HasColumnType("text");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AspNetRefreshTokens","authentication");
                });

            modelBuilder.Entity("QLHSC07.Entity.IdentityExtentions.IdentityMapping.UserLoginLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("ApiName")
                        .HasColumnName("api_name")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FullName")
                        .HasColumnName("full_name")
                        .HasColumnType("text");

                    b.Property<string>("IpAddress")
                        .HasColumnName("ip_address")
                        .HasColumnType("text");

                    b.Property<bool>("IsDelete")
                        .HasColumnName("is_delete")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserLoginLog","authentication");
                });

            modelBuilder.Entity("QLHSC07.Entity.LogHistory.LogHistoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int>("Action")
                        .HasColumnName("action")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDelete")
                        .HasColumnName("is_delete")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserName")
                        .HasColumnName("user_name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("log_history","cms");
                });

            modelBuilder.Entity("QLHSC07.Entity.QLHSC07_Entities.ConstructionType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDelete")
                        .HasColumnName("is_delete")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("construction_type","qlhsc07");
                });

            modelBuilder.Entity("QLHSC07.Entity.QLHSC07_Entities.DocumentAnsType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDelete")
                        .HasColumnName("is_delete")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("document_ans_type","qlhsc07");
                });

            modelBuilder.Entity("QLHSC07.Entity.QLHSC07_Entities.FileTypeAttachment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDelete")
                        .HasColumnName("is_delete")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("file_type_attachment","qlhsc07");
                });

            modelBuilder.Entity("QLHSC07.Entity.QLHSC07_Entities.Flatline", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("CommuneName")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DatePredictReturn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateRealReturn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DistrictName")
                        .HasColumnType("text");

                    b.Property<long?>("GroupProjectId")
                        .HasColumnType("bigint");

                    b.Property<string>("InvestorName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDelete")
                        .HasColumnName("is_delete")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsNewProject")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("PC07ManageId")
                        .HasColumnType("bigint");

                    b.Property<string>("PC07ReceiveName")
                        .HasColumnType("text");

                    b.Property<long?>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<string>("ProjectName")
                        .HasColumnType("text");

                    b.Property<long?>("ProjectTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("ProjectTypeName")
                        .HasColumnType("text");

                    b.Property<string>("ProvinceName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReceiveDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ReceiveUserName")
                        .HasColumnType("text");

                    b.Property<string>("ReceptionForm")
                        .HasColumnType("text");

                    b.Property<long?>("RecordId")
                        .HasColumnType("bigint");

                    b.Property<string>("RecordNum")
                        .HasColumnType("text");

                    b.Property<long?>("RecordTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("RecordTypeName")
                        .HasColumnType("text");

                    b.Property<long?>("ReturnDocNumb")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("flatline","qlhsc07");
                });

            modelBuilder.Entity("QLHSC07.Entity.QLHSC07_Entities.HistoryImportLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDelete")
                        .HasColumnName("is_delete")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RawData")
                        .HasColumnType("text");

                    b.Property<string>("Row")
                        .HasColumnType("text");

                    b.Property<string>("SheetName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("history_import_log","qlhsc07");
                });

            modelBuilder.Entity("QLHSC07.Entity.QLHSC07_Entities.Investor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Address")
                        .HasColumnName("address")
                        .HasColumnType("text");

                    b.Property<int?>("CommuneId")
                        .HasColumnName("commune_id")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DistrictId")
                        .HasColumnName("district_id")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("text");

                    b.Property<string>("Fax")
                        .HasColumnName("fax")
                        .HasColumnType("text");

                    b.Property<bool>("IsDelete")
                        .HasColumnName("is_delete")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasColumnType("text");

                    b.Property<int?>("ProvinceId")
                        .HasColumnName("province_id")
                        .HasColumnType("integer");

                    b.Property<string>("TaxCode")
                        .HasColumnName("tax_code")
                        .HasColumnType("text");

                    b.Property<int?>("commune_id")
                        .HasColumnName("commune_id1")
                        .HasColumnType("integer");

                    b.Property<int?>("district_id")
                        .HasColumnName("district_id1")
                        .HasColumnType("integer");

                    b.Property<int?>("province_id")
                        .HasColumnName("province_id1")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("commune_id");

                    b.HasIndex("district_id");

                    b.HasIndex("province_id");

                    b.ToTable("investor","qlhsc07");
                });

            modelBuilder.Entity("QLHSC07.Entity.QLHSC07_Entities.PC07Local", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Address")
                        .HasColumnName("address")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<int>("CommuneId")
                        .HasColumnName("commune_id")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Fax")
                        .HasColumnName("fax")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<bool>("IsDelete")
                        .HasColumnName("is_delete")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Note")
                        .HasColumnName("note")
                        .HasColumnType("character varying(550)")
                        .HasMaxLength(550);

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<int>("ProvinceId")
                        .HasColumnName("province_id")
                        .HasColumnType("integer");

                    b.Property<string>("UnSignName")
                        .HasColumnName("unsign_name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CommuneId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("pc07_local","qlhsc07");
                });

            modelBuilder.Entity("QLHSC07.Entity.QLHSC07_Entities.Project", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Address")
                        .HasColumnName("address")
                        .HasColumnType("text");

                    b.Property<string>("BuildingSite")
                        .HasColumnName("building_site")
                        .HasColumnType("text");

                    b.Property<int>("CommuneId")
                        .HasColumnName("commune_id")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("InvestorId")
                        .HasColumnName("investor_id")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDelete")
                        .HasColumnName("is_delete")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEdit")
                        .HasColumnName("is_edit")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnName("note")
                        .HasColumnType("text");

                    b.Property<long>("ProjectGroupId")
                        .HasColumnName("project_group_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProjectStatusId")
                        .HasColumnName("project_status_id")
                        .HasColumnType("bigint");

                    b.Property<long>("ProjectTypeId")
                        .HasColumnName("project_type_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CommuneId");

                    b.HasIndex("InvestorId");

                    b.HasIndex("ProjectGroupId");

                    b.HasIndex("ProjectStatusId");

                    b.HasIndex("ProjectTypeId");

                    b.ToTable("project","qlhsc07");
                });

            modelBuilder.Entity("QLHSC07.Entity.QLHSC07_Entities.ProjectGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDelete")
                        .HasColumnName("is_delete")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("project_group","qlhsc07");
                });

            modelBuilder.Entity("QLHSC07.Entity.QLHSC07_Entities.ProjectHasCommune", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int>("CommuneId")
                        .HasColumnName("commune_id")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDelete")
                        .HasColumnName("is_delete")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("ProjectId")
                        .HasColumnName("project_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("CommuneId", "ProjectId")
                        .IsUnique();

                    b.ToTable("project_has_commune","qlhsc07");
                });

            modelBuilder.Entity("QLHSC07.Entity.QLHSC07_Entities.ProjectStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDelete")
                        .HasColumnName("is_delete")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("project_status","qlhsc07");
                });

            modelBuilder.Entity("QLHSC07.Entity.QLHSC07_Entities.ProjectType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDelete")
                        .HasColumnName("is_delete")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("project_type","qlhsc07");
                });

            modelBuilder.Entity("QLHSC07.Entity.QLHSC07_Entities.Rank", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDelete")
                        .HasColumnName("is_delete")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("ranks","qlhsc07");
                });

            modelBuilder.Entity("QLHSC07.Entity.QLHSC07_Entities.ReceiveType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDelete")
                        .HasColumnName("is_delete")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("formality_recieve_profile","qlhsc07");
                });

            modelBuilder.Entity("QLHSC07.Entity.QLHSC07_Entities.Records", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DatePredictCheck")
                        .HasColumnName("date_predict_check")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DatePredictReturn")
                        .HasColumnName("predict_return_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateRealReturn")
                        .HasColumnName("date_real_return")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("DocumentAnsTypeId")
                        .HasColumnName("document_ans_type_id")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDelete")
                        .HasColumnName("is_delete")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsNewProject")
                        .HasColumnName("is_new_project")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("PC07ManageId")
                        .HasColumnName("pc07_manage_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("PC07ReceiveId")
                        .HasColumnName("pc07_receive_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProjectId")
                        .HasColumnName("project_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ReceiveDate")
                        .HasColumnName("receive_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("ReceiveTypeId")
                        .HasColumnName("receive_type_id")
                        .HasColumnType("bigint");

                    b.Property<string>("ReceiveUserName")
                        .HasColumnName("receive_user_name")
                        .HasColumnType("text");

                    b.Property<string>("RecordNum")
                        .HasColumnName("record_num")
                        .HasColumnType("text");

                    b.Property<long?>("RecordsStatusId")
                        .HasColumnName("records_status_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("RecordsTypeId")
                        .HasColumnName("records_types_id")
                        .HasColumnType("bigint");

                    b.Property<bool?>("Result")
                        .HasColumnName("result")
                        .HasColumnType("boolean");

                    b.Property<long?>("ReturnDocNumb")
                        .HasColumnName("return_doc_numb")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DocumentAnsTypeId");

                    b.HasIndex("PC07ManageId");

                    b.HasIndex("PC07ReceiveId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ReceiveTypeId");

                    b.HasIndex("RecordsStatusId");

                    b.HasIndex("RecordsTypeId");

                    b.ToTable("records","qlhsc07");
                });

            modelBuilder.Entity("QLHSC07.Entity.QLHSC07_Entities.RecordsFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("DocumentUploadId")
                        .HasColumnName("document_upload_id")
                        .HasColumnType("bigint");

                    b.Property<long>("FileTypeAttachmentId")
                        .HasColumnName("file_type_attachment_id")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDelete")
                        .HasColumnName("is_delete")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("RecordsId")
                        .HasColumnName("records_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DocumentUploadId");

                    b.HasIndex("FileTypeAttachmentId");

                    b.HasIndex("RecordsId");

                    b.ToTable("records_file","qlhsc07");
                });

            modelBuilder.Entity("QLHSC07.Entity.QLHSC07_Entities.RecordsStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDelete")
                        .HasColumnName("is_delete")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("records_status","qlhsc07");
                });

            modelBuilder.Entity("QLHSC07.Entity.QLHSC07_Entities.RecordsType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("IsApproval")
                        .HasColumnName("is_approval")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDelete")
                        .HasColumnName("is_delete")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<int>("WaitingTime")
                        .HasColumnName("waiting_time")
                        .HasColumnType("integer");

                    b.Property<string>("Waiting_Type")
                        .HasColumnName("waiting_type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("records_type","qlhsc07");
                });

            modelBuilder.Entity("QLHSC07.Entity.QLHSC07_Entities.RecordsTypeFileType", b =>
                {
                    b.Property<long>("RecordsTypeId")
                        .HasColumnName("records_type_id")
                        .HasColumnType("bigint");

                    b.Property<long>("FileTypeAttachmentId")
                        .HasColumnName("file_type_attachment_id")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDelete")
                        .HasColumnName("is_delete")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequired")
                        .HasColumnName("is_required")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("RecordsTypeId", "FileTypeAttachmentId");

                    b.HasIndex("FileTypeAttachmentId");

                    b.ToTable("records_type_file_type","qlhsc07");
                });

            modelBuilder.Entity("QLHSC07.Entity.QLHSC07_Entities.Regency", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDelete")
                        .HasColumnName("is_delete")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("regency","qlhsc07");
                });

            modelBuilder.Entity("QLHSC07.Entity.QLHSC07_MSG_Entities.HasMsgSession", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDelete")
                        .HasColumnName("is_delete")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("MsgSessionId")
                        .HasColumnName("msg_session_id")
                        .HasColumnType("text");

                    b.Property<long>("PC07LocalId")
                        .HasColumnName("pc07_local_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MsgSessionId");

                    b.HasIndex("PC07LocalId");

                    b.ToTable("has_msg_session","qlhsc07");
                });

            modelBuilder.Entity("QLHSC07.Entity.QLHSC07_MSG_Entities.Message", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Content")
                        .HasColumnName("content")
                        .HasColumnType("character varying(9999)")
                        .HasMaxLength(9999);

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDelete")
                        .HasColumnName("is_delete")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsImportant")
                        .HasColumnName("is_important")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReply")
                        .HasColumnName("is_reply")
                        .HasColumnType("boolean");

                    b.Property<long?>("MessageById")
                        .HasColumnName("message_by_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("MessageDate")
                        .HasColumnName("message_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("MsgSessionId")
                        .HasColumnName("msg_session_id")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MessageById");

                    b.HasIndex("MsgSessionId");

                    b.ToTable("message","qlhsc07");
                });

            modelBuilder.Entity("QLHSC07.Entity.QLHSC07_MSG_Entities.MessageHasFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<long>("AttachmentId")
                        .HasColumnName("attachment_id")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDelete")
                        .HasColumnName("is_delete")
                        .HasColumnType("boolean");

                    b.Property<long>("MessageId")
                        .HasColumnName("message_id")
                        .HasColumnType("bigint");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("MessageId");

                    b.ToTable("message_has_file","qlhsc07");
                });

            modelBuilder.Entity("QLHSC07.Entity.QLHSC07_MSG_Entities.MsgReceive", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDelete")
                        .HasColumnName("is_delete")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("MsgSessionId")
                        .HasColumnName("msg_session_id")
                        .HasColumnType("text");

                    b.Property<long>("ReceivePC07Id")
                        .HasColumnName("receive_pc07_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MsgSessionId");

                    b.HasIndex("ReceivePC07Id");

                    b.ToTable("msg_receive","qlhsc07");
                });

            modelBuilder.Entity("QLHSC07.Entity.QLHSC07_MSG_Entities.MsgSession", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDelete")
                        .HasColumnName("is_delete")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("SendPC07Id")
                        .HasColumnName("send_pc07_id")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SendPC07Id");

                    b.ToTable("msg_session","qlhsc07");
                });

            modelBuilder.Entity("QLHSC07.Entity.ReferenceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("reference_type","sys");
                });

            modelBuilder.Entity("QLHSC07.Entity.SecurityMatrix.Action", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("action","sys");
                });

            modelBuilder.Entity("QLHSC07.Entity.SecurityMatrix.Screen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<string>("Icon")
                        .HasColumnName("icon")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.Property<int?>("ParentId")
                        .HasColumnName("parent_id")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("screen","sys");
                });

            modelBuilder.Entity("QLHSC07.Entity.SecurityMatrix.SecurityMatrix", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int>("ActionId")
                        .HasColumnName("action_id")
                        .HasColumnType("integer");

                    b.Property<string>("RoleId")
                        .HasColumnName("role_id")
                        .HasColumnType("text");

                    b.Property<int>("ScreenId")
                        .HasColumnName("screen_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ActionId");

                    b.HasIndex("RoleId");

                    b.HasIndex("ScreenId");

                    b.ToTable("security_matrix","sys");
                });

            modelBuilder.Entity("QLHSC07.Entity.Administrative.Commune", b =>
                {
                    b.HasOne("QLHSC07.Entity.Administrative.District", "District")
                        .WithMany("Communes")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QLHSC07.Entity.Administrative.District", b =>
                {
                    b.HasOne("QLHSC07.Entity.Administrative.Province", "Province")
                        .WithMany("Districts")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QLHSC07.Entity.ConsultCommunity.AnswerExtension", b =>
                {
                    b.HasOne("QLHSC07.Entity.ConsultCommunity.FormTemplateAnswer", "Answer")
                        .WithMany()
                        .HasForeignKey("AnswerId");

                    b.HasOne("QLHSC07.Entity.ConsultCommunity.PersonInfoAnswer", "PersonInfoAnswer")
                        .WithMany("Answers")
                        .HasForeignKey("PersonInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QLHSC07.Entity.ConsultCommunity.FormTemplateQuestion", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QLHSC07.Entity.ConsultCommunity.FormTemplateAnswer", b =>
                {
                    b.HasOne("QLHSC07.Entity.ConsultCommunity.FormTemplateQuestion", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QLHSC07.Entity.ConsultCommunity.FormTemplateQuestion", b =>
                {
                    b.HasOne("QLHSC07.Entity.ConsultCommunity.FormTemplate", "FormTemplate")
                        .WithMany("Questions")
                        .HasForeignKey("FormTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QLHSC07.Entity.ConsultCommunity.PersonInfoAnswer", b =>
                {
                    b.HasOne("QLHSC07.Entity.ConsultCommunity.FormTemplate", "FormTemplate")
                        .WithMany("PersonInfoAnswers")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QLHSC07.Entity.DocumentUpload", b =>
                {
                    b.HasOne("QLHSC07.Entity.Document.FileExtension", "FileExtension")
                        .WithMany()
                        .HasForeignKey("FileExtensionId");
                });

            modelBuilder.Entity("QLHSC07.Entity.EmailGenerated", b =>
                {
                    b.HasOne("QLHSC07.Entity.ReferenceType", "ReferenceType")
                        .WithMany("EmailGenerates")
                        .HasForeignKey("ReferenceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QLHSC07.Entity.IdentityAccess.RoleClaim", b =>
                {
                    b.HasOne("QLHSC07.Entity.IdentityAccess.Role", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QLHSC07.Entity.IdentityAccess.User", b =>
                {
                    b.HasOne("QLHSC07.Entity.DocumentUpload", "DocumentUpload")
                        .WithMany()
                        .HasForeignKey("DocumentUploadId");

                    b.HasOne("QLHSC07.Entity.QLHSC07_Entities.PC07Local", "PC07Local")
                        .WithMany()
                        .HasForeignKey("PC07LocalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QLHSC07.Entity.QLHSC07_Entities.Rank", "Ranks")
                        .WithMany("User")
                        .HasForeignKey("RankId");

                    b.HasOne("QLHSC07.Entity.QLHSC07_Entities.Regency", "Regencys")
                        .WithMany("User")
                        .HasForeignKey("RegencyId");
                });

            modelBuilder.Entity("QLHSC07.Entity.IdentityAccess.UserClaim", b =>
                {
                    b.HasOne("QLHSC07.Entity.IdentityAccess.User", "User")
                        .WithMany("UserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QLHSC07.Entity.IdentityAccess.UserLogin", b =>
                {
                    b.HasOne("QLHSC07.Entity.IdentityAccess.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QLHSC07.Entity.IdentityAccess.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("QLHSC07.Entity.IdentityAccess.UserRole", b =>
                {
                    b.HasOne("QLHSC07.Entity.IdentityAccess.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QLHSC07.Entity.IdentityAccess.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QLHSC07.Entity.IdentityAccess.UserTokens", b =>
                {
                    b.HasOne("QLHSC07.Entity.IdentityAccess.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QLHSC07.Entity.IdentityExtentions.IdentityMapping.UserLoginLog", b =>
                {
                    b.HasOne("QLHSC07.Entity.IdentityAccess.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("QLHSC07.Entity.QLHSC07_Entities.Investor", b =>
                {
                    b.HasOne("QLHSC07.Entity.Administrative.Commune", "Commune")
                        .WithMany()
                        .HasForeignKey("commune_id");

                    b.HasOne("QLHSC07.Entity.Administrative.District", "District")
                        .WithMany()
                        .HasForeignKey("district_id");

                    b.HasOne("QLHSC07.Entity.Administrative.Province", "Province")
                        .WithMany()
                        .HasForeignKey("province_id");
                });

            modelBuilder.Entity("QLHSC07.Entity.QLHSC07_Entities.PC07Local", b =>
                {
                    b.HasOne("QLHSC07.Entity.Administrative.Commune", "Commune")
                        .WithMany()
                        .HasForeignKey("CommuneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QLHSC07.Entity.Administrative.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QLHSC07.Entity.QLHSC07_Entities.Project", b =>
                {
                    b.HasOne("QLHSC07.Entity.Administrative.Commune", "Commune")
                        .WithMany()
                        .HasForeignKey("CommuneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QLHSC07.Entity.QLHSC07_Entities.Investor", "Investors")
                        .WithMany()
                        .HasForeignKey("InvestorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QLHSC07.Entity.QLHSC07_Entities.ProjectGroup", "ProjectGroup")
                        .WithMany("Projects")
                        .HasForeignKey("ProjectGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QLHSC07.Entity.QLHSC07_Entities.ProjectStatus", "ProjectStatus")
                        .WithMany("Projects")
                        .HasForeignKey("ProjectStatusId");

                    b.HasOne("QLHSC07.Entity.QLHSC07_Entities.ProjectType", "ProjectType")
                        .WithMany("Projects")
                        .HasForeignKey("ProjectTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QLHSC07.Entity.QLHSC07_Entities.ProjectHasCommune", b =>
                {
                    b.HasOne("QLHSC07.Entity.Administrative.Commune", "Commune")
                        .WithMany()
                        .HasForeignKey("CommuneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QLHSC07.Entity.QLHSC07_Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QLHSC07.Entity.QLHSC07_Entities.Records", b =>
                {
                    b.HasOne("QLHSC07.Entity.QLHSC07_Entities.DocumentAnsType", "DocumentAnsType")
                        .WithMany("Records")
                        .HasForeignKey("DocumentAnsTypeId");

                    b.HasOne("QLHSC07.Entity.QLHSC07_Entities.PC07Local", "PC07Manage")
                        .WithMany()
                        .HasForeignKey("PC07ManageId");

                    b.HasOne("QLHSC07.Entity.QLHSC07_Entities.PC07Local", "PC07Receive")
                        .WithMany()
                        .HasForeignKey("PC07ReceiveId");

                    b.HasOne("QLHSC07.Entity.QLHSC07_Entities.Project", "Projects")
                        .WithMany("Records")
                        .HasForeignKey("ProjectId");

                    b.HasOne("QLHSC07.Entity.QLHSC07_Entities.ReceiveType", "ReceiveTypes")
                        .WithMany("Recordses")
                        .HasForeignKey("ReceiveTypeId");

                    b.HasOne("QLHSC07.Entity.QLHSC07_Entities.RecordsStatus", "RecordsStatus")
                        .WithMany("Recordses")
                        .HasForeignKey("RecordsStatusId");

                    b.HasOne("QLHSC07.Entity.QLHSC07_Entities.RecordsType", "RecordsTypes")
                        .WithMany("Recordses")
                        .HasForeignKey("RecordsTypeId");
                });

            modelBuilder.Entity("QLHSC07.Entity.QLHSC07_Entities.RecordsFile", b =>
                {
                    b.HasOne("QLHSC07.Entity.DocumentUpload", "DocumentUpload")
                        .WithMany()
                        .HasForeignKey("DocumentUploadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QLHSC07.Entity.QLHSC07_Entities.FileTypeAttachment", "FileTypeAttachment")
                        .WithMany()
                        .HasForeignKey("FileTypeAttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QLHSC07.Entity.QLHSC07_Entities.Records", "Records")
                        .WithMany("RecordsFiles")
                        .HasForeignKey("RecordsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QLHSC07.Entity.QLHSC07_Entities.RecordsTypeFileType", b =>
                {
                    b.HasOne("QLHSC07.Entity.QLHSC07_Entities.FileTypeAttachment", "FileTypeAttachment")
                        .WithMany("RecordTypeFileTypes")
                        .HasForeignKey("FileTypeAttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QLHSC07.Entity.QLHSC07_Entities.RecordsType", "RecordsType")
                        .WithMany("RecordTypeFileTypes")
                        .HasForeignKey("RecordsTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QLHSC07.Entity.QLHSC07_MSG_Entities.HasMsgSession", b =>
                {
                    b.HasOne("QLHSC07.Entity.QLHSC07_MSG_Entities.MsgSession", "MsgSession")
                        .WithMany("HasMsgSessions")
                        .HasForeignKey("MsgSessionId");

                    b.HasOne("QLHSC07.Entity.QLHSC07_Entities.PC07Local", "PC07Local")
                        .WithMany()
                        .HasForeignKey("PC07LocalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QLHSC07.Entity.QLHSC07_MSG_Entities.Message", b =>
                {
                    b.HasOne("QLHSC07.Entity.QLHSC07_Entities.PC07Local", "MessageBy")
                        .WithMany()
                        .HasForeignKey("MessageById");

                    b.HasOne("QLHSC07.Entity.QLHSC07_MSG_Entities.MsgSession", "MsgSession")
                        .WithMany("Messages")
                        .HasForeignKey("MsgSessionId");
                });

            modelBuilder.Entity("QLHSC07.Entity.QLHSC07_MSG_Entities.MessageHasFile", b =>
                {
                    b.HasOne("QLHSC07.Entity.DocumentUpload", "Attachment")
                        .WithMany()
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QLHSC07.Entity.QLHSC07_MSG_Entities.Message", "Message")
                        .WithMany("MessageHasFile")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QLHSC07.Entity.QLHSC07_MSG_Entities.MsgReceive", b =>
                {
                    b.HasOne("QLHSC07.Entity.QLHSC07_MSG_Entities.MsgSession", "MsgSession")
                        .WithMany("MsgReceives")
                        .HasForeignKey("MsgSessionId");

                    b.HasOne("QLHSC07.Entity.QLHSC07_Entities.PC07Local", "ReceivePC07Local")
                        .WithMany()
                        .HasForeignKey("ReceivePC07Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QLHSC07.Entity.QLHSC07_MSG_Entities.MsgSession", b =>
                {
                    b.HasOne("QLHSC07.Entity.QLHSC07_Entities.PC07Local", "SendPC07Local")
                        .WithMany()
                        .HasForeignKey("SendPC07Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QLHSC07.Entity.SecurityMatrix.Screen", b =>
                {
                    b.HasOne("QLHSC07.Entity.SecurityMatrix.Screen", "Parent")
                        .WithMany("Childrent")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("QLHSC07.Entity.SecurityMatrix.SecurityMatrix", b =>
                {
                    b.HasOne("QLHSC07.Entity.SecurityMatrix.Action", "Action")
                        .WithMany("SecurityMatrices")
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QLHSC07.Entity.IdentityAccess.Role", "Role")
                        .WithMany("SecurityMatrices")
                        .HasForeignKey("RoleId");

                    b.HasOne("QLHSC07.Entity.SecurityMatrix.Screen", "Screen")
                        .WithMany("SecurityMatrices")
                        .HasForeignKey("ScreenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
